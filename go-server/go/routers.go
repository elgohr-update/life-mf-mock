/*
 * Product aggregation composite interface
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "This is life.megafon.ru/personal-offers/ internal api mock")
}

const basePath = "/life/api/v1"

var routes = Routes{
	Route{
		"Index",
		"GET",
		basePath,
		Index,
	},

	Route{
		"DeleteSubscription",
		strings.ToUpper("Delete"),
		basePath + "/subscriptions/{serviceid}",
		DeleteSubscription,
	},

	Route{
		"GetOffers",
		strings.ToUpper("Get"),
		basePath + "/offerslist",
		GetOffers,
	},

	Route{
		"GetSubscriptions",
		strings.ToUpper("Get"),
		basePath + "/subscriptionslist",
		GetSubscriptions,
	},

	Route{
		"PostSubscription",
		strings.ToUpper("Post"),
		basePath + "/subscriptions/{serviceid}",
		PostSubscription,
	},
}
